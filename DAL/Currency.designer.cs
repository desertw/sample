#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
    using System.Configuration;
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="demo")]
	public partial class CurrencyDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCurrency(Currency instance);
    partial void UpdateCurrency(Currency instance);
    partial void DeleteCurrency(Currency instance);
    partial void InsertExRate(ExRate instance);
    partial void UpdateExRate(ExRate instance);
    partial void DeleteExRate(ExRate instance);
    #endregion
		
		public CurrencyDataContext() : base(ConfigurationManager.ConnectionStrings["curConn"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CurrencyDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CurrencyDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CurrencyDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CurrencyDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Currency> Currencies
		{
			get
			{
				return this.GetTable<Currency>();
			}
		}
		
		public System.Data.Linq.Table<ExRate> ExRates
		{
			get
			{
				return this.GetTable<ExRate>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Currency")]
	public partial class Currency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Country;
		
		private string _Name;
		
		private string _Code;
		
		private string _Symbol;
		
		private EntitySet<ExRate> _ExRates;
		
		private EntitySet<ExRate> _ExRates1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnSymbolChanging(string value);
    partial void OnSymbolChanged();
    #endregion
		
		public Currency()
		{
			this._ExRates = new EntitySet<ExRate>(new Action<ExRate>(this.attach_ExRates), new Action<ExRate>(this.detach_ExRates));
			this._ExRates1 = new EntitySet<ExRate>(new Action<ExRate>(this.attach_ExRates1), new Action<ExRate>(this.detach_ExRates1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NChar(3) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symbol", DbType="NVarChar(10)")]
		public string Symbol
		{
			get
			{
				return this._Symbol;
			}
			set
			{
				if ((this._Symbol != value))
				{
					this.OnSymbolChanging(value);
					this.SendPropertyChanging();
					this._Symbol = value;
					this.SendPropertyChanged("Symbol");
					this.OnSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_ExRate", Storage="_ExRates", ThisKey="Code", OtherKey="FromCurCode")]
		public EntitySet<ExRate> ExRates
		{
			get
			{
				return this._ExRates;
			}
			set
			{
				this._ExRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_ExRate1", Storage="_ExRates1", ThisKey="Code", OtherKey="ToCurCode")]
		public EntitySet<ExRate> ExRates1
		{
			get
			{
				return this._ExRates1;
			}
			set
			{
				this._ExRates1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExRates(ExRate entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_ExRates(ExRate entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_ExRates1(ExRate entity)
		{
			this.SendPropertyChanging();
			entity.Currency1 = this;
		}
		
		private void detach_ExRates1(ExRate entity)
		{
			this.SendPropertyChanging();
			entity.Currency1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExRate")]
	public partial class ExRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FromCurCode;
		
		private string _ToCurCode;
		
		private decimal _AverageRate;
		
		private decimal _EndOfDayRate;
		
		private System.DateTime _PostDate;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<Currency> _Currency1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFromCurCodeChanging(string value);
    partial void OnFromCurCodeChanged();
    partial void OnToCurCodeChanging(string value);
    partial void OnToCurCodeChanged();
    partial void OnAverageRateChanging(decimal value);
    partial void OnAverageRateChanged();
    partial void OnEndOfDayRateChanging(decimal value);
    partial void OnEndOfDayRateChanged();
    partial void OnPostDateChanging(System.DateTime value);
    partial void OnPostDateChanged();
    #endregion
		
		public ExRate()
		{
			this._Currency = default(EntityRef<Currency>);
			this._Currency1 = default(EntityRef<Currency>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromCurCode", DbType="NChar(3) NOT NULL", CanBeNull=false)]
		public string FromCurCode
		{
			get
			{
				return this._FromCurCode;
			}
			set
			{
				if ((this._FromCurCode != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromCurCodeChanging(value);
					this.SendPropertyChanging();
					this._FromCurCode = value;
					this.SendPropertyChanged("FromCurCode");
					this.OnFromCurCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToCurCode", DbType="NChar(3) NOT NULL", CanBeNull=false)]
		public string ToCurCode
		{
			get
			{
				return this._ToCurCode;
			}
			set
			{
				if ((this._ToCurCode != value))
				{
					if (this._Currency1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToCurCodeChanging(value);
					this.SendPropertyChanging();
					this._ToCurCode = value;
					this.SendPropertyChanged("ToCurCode");
					this.OnToCurCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AverageRate", DbType="Money NOT NULL")]
		public decimal AverageRate
		{
			get
			{
				return this._AverageRate;
			}
			set
			{
				if ((this._AverageRate != value))
				{
					this.OnAverageRateChanging(value);
					this.SendPropertyChanging();
					this._AverageRate = value;
					this.SendPropertyChanged("AverageRate");
					this.OnAverageRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndOfDayRate", DbType="Money NOT NULL")]
		public decimal EndOfDayRate
		{
			get
			{
				return this._EndOfDayRate;
			}
			set
			{
				if ((this._EndOfDayRate != value))
				{
					this.OnEndOfDayRateChanging(value);
					this.SendPropertyChanging();
					this._EndOfDayRate = value;
					this.SendPropertyChanged("EndOfDayRate");
					this.OnEndOfDayRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostDate", DbType="DateTime NOT NULL")]
		public System.DateTime PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_ExRate", Storage="_Currency", ThisKey="FromCurCode", OtherKey="Code", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.ExRates.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.ExRates.Add(this);
						this._FromCurCode = value.Code;
					}
					else
					{
						this._FromCurCode = default(string);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_ExRate1", Storage="_Currency1", ThisKey="ToCurCode", OtherKey="Code", IsForeignKey=true)]
		public Currency Currency1
		{
			get
			{
				return this._Currency1.Entity;
			}
			set
			{
				Currency previousValue = this._Currency1.Entity;
				if (((previousValue != value) 
							|| (this._Currency1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency1.Entity = null;
						previousValue.ExRates1.Remove(this);
					}
					this._Currency1.Entity = value;
					if ((value != null))
					{
						value.ExRates1.Add(this);
						this._ToCurCode = value.Code;
					}
					else
					{
						this._ToCurCode = default(string);
					}
					this.SendPropertyChanged("Currency1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
